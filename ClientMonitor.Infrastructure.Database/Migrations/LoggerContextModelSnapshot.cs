// <auto-generated />
using System;
using ClientMonitor.Infrastructure.Database.Contexts;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace ClientMonitor.Infrastructure.Database.Migrations
{
    [DbContext(typeof(LoggerContext))]
    partial class LoggerContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "5.0.11");

            modelBuilder.Entity("ClientMonitor.Infrastructure.Database.Entities.DataForEdit", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Date")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<string>("Value")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("EDataForEdit");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Date = "Путь выгрузки файлов ~Выдача",
                            Name = "PathClaim",
                            Value = "C:\\Users\\Big Lolipop\\Desktop\\Записи с камер\\video\\ZLOSE"
                        },
                        new
                        {
                            Id = 2,
                            Date = "Путь выгрузки файлов ~Склад",
                            Name = "PathStorage",
                            Value = "C:\\Users\\Big Lolipop\\Desktop\\Записи с камер\\video\\KMXLM"
                        },
                        new
                        {
                            Id = 3,
                            Date = "Формат выгрузки файлов",
                            Name = "FormatFile",
                            Value = "*mp4"
                        },
                        new
                        {
                            Id = 4,
                            Date = "Путь хранения файлов в облаке ~Выдача",
                            Name = "PathDownloadClaim",
                            Value = "Записи/Выдача"
                        },
                        new
                        {
                            Id = 5,
                            Date = "Путь хранения файлов в облаке ~Склад",
                            Name = "PathDownloadStorage",
                            Value = "Записи/Склад"
                        },
                        new
                        {
                            Id = 6,
                            Date = "Почта для входа в облако",
                            Name = "Mail",
                            Value = "afc.studio@yandex.ru"
                        },
                        new
                        {
                            Id = 7,
                            Date = "Пароль для входа в облако",
                            Name = "Pas",
                            Value = "lollipop321123"
                        },
                        new
                        {
                            Id = 8,
                            Date = "Время начала загрузки в облако~~Обновляется со следующей проверки!!!",
                            Name = "TimeCloud",
                            Value = "2021-11-18 20:00:00"
                        },
                        new
                        {
                            Id = 9,
                            Date = "Время первой проверки мониторинга характеристик ПК~~Обновляется со следующей проверки!!!",
                            Name = "TimeFirst",
                            Value = "2021-11-18 6:00:00"
                        },
                        new
                        {
                            Id = 10,
                            Date = "Время второй проверки мониторинга характеристик ПК~~Обновляется со следующей проверки!!!",
                            Name = "TimeSecond",
                            Value = "2021-11-18 15:30:00"
                        },
                        new
                        {
                            Id = 11,
                            Date = "Периодичность мониторинга сайтов/серверов",
                            Name = "PeriodMonitoring",
                            Value = "3600000"
                        },
                        new
                        {
                            Id = 12,
                            Date = "Id чата в телеграме для отправки сообщений по мониторингу сайтов и серверов ",
                            Name = "IdChatServer",
                            Value = "-742266994"
                        },
                        new
                        {
                            Id = 13,
                            Date = "Id чата в телеграме для отправки сообщений по мониторингу характеристик ПК",
                            Name = "IdChatMonitoring",
                            Value = "-693501604"
                        },
                        new
                        {
                            Id = 14,
                            Date = "Проверка для остановки/запуска приложения",
                            Name = "onOff",
                            Value = "False"
                        });
                });

            modelBuilder.Entity("ClientMonitor.Infrastructure.Database.Entities.EntitiesCpu", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<double>("BusyCpu")
                        .HasColumnType("REAL");

                    b.Property<DateTime>("DateTime")
                        .HasColumnType("TEXT");

                    b.Property<double>("FreeCpu")
                        .HasColumnType("REAL");

                    b.HasKey("Id");

                    b.ToTable("ECpus");
                });

            modelBuilder.Entity("ClientMonitor.Infrastructure.Database.Entities.EntitiesHttp", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("DateTime")
                        .HasColumnType("TEXT");

                    b.Property<int>("Length")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.ToTable("EHttps");
                });

            modelBuilder.Entity("ClientMonitor.Infrastructure.Database.Entities.EntitiesProc", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("DateTime")
                        .HasColumnType("TEXT");

                    b.Property<string>("Process")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("EProcs");
                });

            modelBuilder.Entity("ClientMonitor.Infrastructure.Database.Entities.EntitiesRam", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<double>("BusyRam")
                        .HasColumnType("REAL");

                    b.Property<DateTime>("DateTime")
                        .HasColumnType("TEXT");

                    b.Property<double>("FreeRam")
                        .HasColumnType("REAL");

                    b.HasKey("Id");

                    b.ToTable("ERams");
                });

            modelBuilder.Entity("ClientMonitor.Infrastructure.Database.Entities.Log", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("DateTime")
                        .HasColumnType("TEXT");

                    b.Property<string>("Text")
                        .HasColumnType("TEXT");

                    b.Property<int>("TypeLog")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.ToTable("Logs");
                });
#pragma warning restore 612, 618
        }
    }
}
